{% import 'input.twig' as input %}
<?php

namespace {{ namespace }};

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Doctrine\ORM\EntityRepository;
use Deozza\PhilarmonyCoreBundle\{% if dbManager == 'mongodb' %}Document{% else %}Entity\{% endif %}\Entity;

class {{ classname }} extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
{% for field,constraints in properties %}
{% if constraints.array is defined %}
{{ input.arrayField(constraints, field) }}
{% elseif constraints.constraints.automatic is not defined %}
{{ input.field(constraints, field) }}
{% elseif constraints.constraints.automatic is defined%}
        $builder->add('{{ field }}', HiddenType::class, [
{% set explodedAutomatic = constraints.constraints.automatic|split('.') %}
{% if 'date' in explodedAutomatic %}
            'data' => new \DateTime('{{ explodedAutomatic[1] }}'),
{% else %}
            'data' => '{{ explodedAutomatic[0] }}',
{% endif %}
        ]);
{% endif %}
{% endfor %}
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(
            [
                'data_class' => null,
                'csrf_protection' => false
            ]
        );
    }
}