<?php

namespace App\Form\{{ namespace }};

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;

use Deozza\PhilarmonyCoreBundle\Entity\Entity;

class {{ classname }} extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
{% for field,constraints in properties %}
{% if constraints.constraints.automatic is not defined %}
{% if constraints.type == 'string' %}
        $builder->add('{{ field }}' , TextType::class, [
            'constraints' => [
{% if constraints.constraints.lengthMin is defined %}
                new Assert\Length(['min'=>'{{ constraints.constraints.lengthMin }}']),
{% endif %}
{% if constraints.constraints.lengthMax is defined %}
                new Assert\Length(['max'=>'{{ constraints.constraints.lengthMax }}']),
{% endif %}
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
{% endif %}
            ],
{% if constraints.constraints.default is defined %}
            'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
        ]);
{% elseif constraints.type == 'int' %}
        $builder->add('{{ field }}' , IntegerType::class, [
            'constraints' => [
{% if constraints.constraints.greaterThan is defined %}
                new Assert\GreaterThan({{ constraints.constraints.greaterThan }}),
{% endif %}
{% if constraints.constraints.lesserThan is defined %}
                new Assert\LesserThan({{ constraints.constraints.lesserThan}}),
{% endif %}
{% if constraints.constraints.greaterThanOrEqual is defined %}
                new Assert\GreaterThanOrEqual({{ constraints.constraints.greaterThanOrEqual }}),
{% endif %}
{% if constraints.constraints.lesserThanOrEqual is defined %}
                new Assert\LesserThanOrEqual({{ constraints.constraints.lesserThanOrEqual }}),
{% endif %}
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
{% endif %}
            ],
{% if constraints.constraints.default is defined %}
            'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
    ]);
{% elseif constraints.type == 'float' %}
    $builder->add('{{ field }}' , NumberType::class, [
        'constraints' => [
{% if constraints.constraints.greaterThan is defined %}
             new Assert\GreaterThan({{ constraints.constraints.greaterThan }}),
{% endif %}
{% if constraints.constraints.lesserThan is defined %}
            new Assert\LesserThan({{ constraints.constraints.lesserThan}}),
{% endif %}
{% if constraints.constraints.greaterThanOrEqual is defined %}
            new Assert\GreaterThanOrEqual({{ constraints.constraints.greaterThanOrEqual }}),
{% endif %}
{% if constraints.constraints.lesserThanOrEqual is defined %}
            new Assert\LesserThanOrEqual({{ constraints.constraints.lesserThanOrEqual }}),
{% endif %}
{% if constraints.constraints.required == true %}
            new Assert\NotBlank(),
{% endif %}
        ],
{% if constraints.constraints.default is defined %}
        'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
    ]);
{% elseif constraints.type ==  'date' %}
    $builder->add('{{ field }}' , DateTimeType::class, [
        'constraints' => [
            new Assert\DateTime(),
{% if constraints.constraints.required == true %}
            new Assert\NotBlank(),
{% endif %}
        ],
        'widget' => 'single_text'
    ]);
{% elseif constraints.type ==  'enumeration' %}
    $builder->add('{{ field }}' , TextType::class, [
        'constraints' => [
            new Assert\Choice([
                'choices' =>[{% for choice in constraints.constraints.choices %} '{{ choice}}',{% endfor %}],
                'strict' => true
            ]),
{% if constraints.constraints.required == true %}
            new Assert\NotBlank(),
{% endif %}
        ],
{% if constraints.constraints.default is defined %}
        'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
    ]);
{% elseif constraints.type == 'entity' %}
    $builder->add('{{ field }}', EntityType::class, [
        'class' => Entity::class,
        'query_builder'=> function(EntityRepository $er)
            {
                return $er->createQueryBuilder('e')
                ->where("e.kind = :kind")
                ->setParameter(':kind', '{{ field }}');
            },
        'choice_value' =>  function(Entity $entity = null)
            {
                return $entity ? $entity->getUuidAsString() : '';
            }
    ]);
{% endif %}
{% endif %}

{% endfor %}

}

public function configureOptions(OptionsResolver $resolver)
{
$resolver->setDefaults(
[
'data_class' => null,
'csrf_protection'   => false
]
);
}

}