{% macro field(constraints, field) %}
{% if constraints.type == 'string' %}
        $builder->add('{{ field }}' , TextType::class, [
            'constraints' => [
{% if constraints.constraints.lengthMin is defined %}
                new Assert\Length(['min'=>'{{ constraints.constraints.lengthMin }}']),
{% endif %}
{% if constraints.constraints.lengthMax is defined %}
                new Assert\Length(['max'=>'{{ constraints.constraints.lengthMax }}']),
{% endif %}
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
{% endif %}
            ],
{% if constraints.constraints.default is defined %}
            'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
        ]);
{% elseif constraints.type == 'int' %}
        $builder->add('{{ field }}' , IntegerType::class, [
            'constraints' => [
{% if constraints.constraints.gt is defined %}
                new Assert\GreaterThan({{ constraints.constraints.gt }}),
{% endif %}
{% if constraints.constraints.lt is defined %}
                new Assert\LessThan({{ constraints.constraints.lt}}),
{% endif %}
{% if constraints.constraints.gtoe is defined %}
                new Assert\GreaterThanOrEqual({{ constraints.constraints.gtoe }}),
{% endif %}
{% if constraints.constraints.ltoe is defined %}
                new Assert\LessThanOrEqual({{ constraints.constraints.ltoe }}),
{% endif %}
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
    {% endif %}
            ],
{% if constraints.constraints.default is defined %}
            'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
        ]);
{% elseif constraints.type == 'float' %}
        $builder->add('{{ field }}' , NumberType::class, [
            'constraints' => [
{% if constraints.constraints.gt is defined %}
                new Assert\GreaterThan({{ constraints.constraints.gt }}),
{% endif %}
{% if constraints.constraints.lt is defined %}
                new Assert\LessThan({{ constraints.constraints.lt}}),
{% endif %}
{% if constraints.constraints.gtoe is defined %}
                new Assert\GreaterThanOrEqual({{ constraints.constraints.gtoe }}),
{% endif %}
{% if constraints.constraints.ltoe is defined %}
                new Assert\LessThanOrEqual({{ constraints.constraints.ltoe }}),
{% endif %}
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
{% endif %}
            ],
{% if constraints.constraints.default is defined %}
            'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
        ]);
{% elseif constraints.type ==  'date' %}
        $builder->add('{{ field }}' , DateTimeType::class, [
            'constraints' => [
                new Assert\DateTime(),
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
{% endif %}
            ],
            'widget' => 'single_text'
        ]);
{% elseif constraints.type == 'enumeration' %}
        $builder->add('{{ field }}' , TextType::class, [
            'constraints' => [
                new Assert\Choice([
                    'choices' =>[{% for choice in constraints.constraints.choices %} '{{ choice}}',{% endfor %}],
                    'strict' => true
                ]),
{% if constraints.constraints.required == true %}
                new Assert\NotBlank(),
{% endif %}
            ],
{% if constraints.constraints.default is defined %}
            'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
        ]);
{% elseif constraints.type == 'entity' %}
        $builder->add('{{ field }}', DocumentType::class, [
            'class' => Entity::class,
            'query_builder'=> function(DocumentRepository $dr){
                return $dr->createQueryBuilder()->find(Entity::class)
                    ->eagerCursor(true)
                    ->field('kind')->equals('{{ constraints.constraints.entity }}');
            },
            'choice_value' => function(Entity $entity = null){
                return $entity ? $entity->getUuidAsString() : '';
            },
            'constraints'=>[
                new Assert\NotBlank()
            ],
            'mapped'=>false
        ]);
{% endif %}
{% endmacro %}

{% macro arrayField(constraints, field) %}
{% if constraints.type == 'string' %}
        $builder->add('{{ field }}' , CollectionType::class, [
            'entry_type' => TextType::class,
            'allow_add' => true,
            'allow_delete' => true,
            'entry_options' => [
                'constraints' => [
{% if constraints.constraints.lengthMin is defined %}
                    new Assert\Length(['min'=>'{{ constraints.constraints.lengthMin }}']),
{% endif %}
{% if constraints.constraints.lengthMax is defined %}
                    new Assert\Length(['max'=>'{{ constraints.constraints.lengthMax }}']),
{% endif %}
{% if constraints.constraints.required == true %}
                    new Assert\NotBlank(),
{% endif %}
                ],
{% if constraints.constraints.default is defined %}
                'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
            ]
        ]);
{% elseif constraints.type == 'int' %}
        $builder->add('{{ field }}' , CollectionType::class, [
            'entry_type' => IntegerType::class,
            'allow_add' => true,
            'allow_delete' => true,
            'entry_options' => [
                'constraints' => [
{% if constraints.constraints.gt is defined %}
                    new Assert\GreaterThan({{ constraints.constraints.gt }}),
{% endif %}
{% if constraints.constraints.lt is defined %}
                    new Assert\LessThan({{ constraints.constraints.lt}}),
{% endif %}
{% if constraints.constraints.gtoe is defined %}
                    new Assert\GreaterThanOrEqual({{ constraints.constraints.gtoe }}),
{% endif %}
{% if constraints.constraints.ltoe is defined %}
                    new Assert\LessThanOrEqual({{ constraints.constraints.ltoe }}),
{% endif %}
{% if constraints.constraints.required == true %}
                    new Assert\NotBlank(),
{% endif %}
                ],
{% if constraints.constraints.default is defined %}
                'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
            ]
        ]);
{% elseif constraints.type == 'float' %}
        $builder->add('{{ field }}' , CollectionType::class, [
            'entry_type' => NumebrType::class,
            'allow_add' => true,
            'allow_delete' => true,
            'entry_options' => [
                'constraints' => [
{% if constraints.constraints.gt is defined %}
                    new Assert\GreaterThan({{ constraints.constraints.gt }}),
{% endif %}
{% if constraints.constraints.lt is defined %}
                    new Assert\LessThan({{ constraints.constraints.lt}}),
{% endif %}
{% if constraints.constraints.gtoe is defined %}
                    new Assert\GreaterThanOrEqual({{ constraints.constraints.gtoe }}),
{% endif %}
{% if constraints.constraints.ltoe is defined %}
                    new Assert\LessThanOrEqual({{ constraints.constraints.ltoe }}),
{% endif %}
{% if constraints.constraints.required == true %}
                    new Assert\NotBlank(),
{% endif %}
                ],
{% if constraints.constraints.default is defined %}
                'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
            ]
        ]);
{% elseif constraints.type ==  'date' %}
        $builder->add('{{ field }}' , CollectionType::class, [
            'entry_type' => DateTimeType::class,
            'allow_add' => true,
            'allow_delete' => true,
            'entry_options' => [
                'constraints' => [
                    new Assert\DateTime(),
{% if constraints.constraints.required == true %}
                    new Assert\NotBlank(),
{% endif %}
                ],
                'widget' => 'single_text'
            ]
        ]);
{% elseif constraints.type == 'enumeration' %}
        $builder->add('{{ field }}' , CollectionType::class, [
            'entry_type' => ChoiceType::class,
            'allow_add' => true,
            'allow_delete' => true,
            'entry_options' => [
                'choices' =>[{% for choice in constraints.constraints.choices %} '{{ choice}}',{% endfor %}],
{% if constraints.constraints.required == true %}
                'constraints' => [
                    new Assert\NotBlank(),
                ],
{% endif %}
{% if constraints.constraints.default is defined %}
                'empty_data' => '{{ constraints.constraints.default }}'
{% endif %}
            ]
        ]);
{% elseif constraints.type == 'entity' %}
        $builder->add('{{ field }}', CollectionType::class, [
            'entry_type' => DocumentType::class,
            'allow_add' => true,
            'allow_delete' => true,
            'entry_options' => [
                'class' => Entity::class,
                'query_builder'=> function(DocumentRepository $dr){
                    return $dr->createQueryBuilder()->find(Entity::class)
                        ->eagerCursor(true)
                        ->field('kind')->equals('{{ constraints.constraints.entity }}');
                },
                'choice_value' => function(Entity $entity = null){
                    return $entity ? $entity->getUuidAsString() : '';
                },
            ]
        ]);
{% endif %}
{% endmacro %}